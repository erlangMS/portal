/*
 * Copyright 2016 Palantir Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
/*
 * This TS script reads the metadata from each TSLint built-in rule
 * and serializes it in a format appropriate for the docs website.
 *
 * This script expects there to be a tslint-gh-pages directory
 * parallel to the main tslint directory. The tslint-gh-pages should
 * have the gh-pages branch of the TSLint repo checked out.
 * One easy way to do this is with the following Git command:
 *
 * ```
 * git worktree add -b gh-pages ../tslint-gh-pages origin/gh-pages
 * ```
 *
 * See http://palantir.github.io/tslint/develop/docs/ for more info
 *
 */
var fs = require("fs");
var glob = require("glob");
var yaml = require("js-yaml");
var path = require("path");
var DOCS_DIR = "../docs";
var DOCS_RULE_DIR = path.join(DOCS_DIR, "rules");
var rulePaths = glob.sync("../lib/rules/*Rule.js");
var rulesJson = [];
for (var _i = 0, rulePaths_1 = rulePaths; _i < rulePaths_1.length; _i++) {
    var rulePath = rulePaths_1[_i];
    // tslint:disable-next-line:no-var-requires
    var ruleModule = require(rulePath);
    var Rule = ruleModule.Rule;
    if (Rule != null && Rule.metadata != null) {
        var metadata = Rule.metadata;
        var fileData_1 = generateRuleFile(metadata);
        var fileDirectory = path.join(DOCS_RULE_DIR, metadata.ruleName);
        // write file for each specific rule
        if (!fs.existsSync(fileDirectory)) {
            fs.mkdirSync(fileDirectory);
        }
        fs.writeFileSync(path.join(fileDirectory, "index.html"), fileData_1);
        rulesJson.push(metadata);
    }
}
// write overall data file, this is used to generate the index page for the rules
var fileData = JSON.stringify(rulesJson, undefined, 2);
fs.writeFileSync(path.join(DOCS_DIR, "_data", "rules.json"), fileData);
/**
 * Based off a rule's metadata, generates a string Jekyll "HTML" file
 * that only consists of a YAML front matter block.
 */
function generateRuleFile(metadata) {
    var yamlData = {};
    // TODO: Use Object.assign when Node 0.12 support is dropped (#1181)
    for (var _i = 0, _a = Object.keys(metadata); _i < _a.length; _i++) {
        var key = _a[_i];
        yamlData[key] = metadata[key];
    }
    yamlData.optionsJSON = JSON.stringify(metadata.options, undefined, 2);
    yamlData.layout = "rule";
    yamlData.title = "Rule: " + metadata.ruleName;
    return "---\n" + yaml.safeDump(yamlData, { lineWidth: 140 }) + "---";
}
//# sourceMappingURL=buildDocs.js.map