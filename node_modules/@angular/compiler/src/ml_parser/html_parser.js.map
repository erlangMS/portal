{"version":3,"file":"html_parser.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/ml_parser/html_parser.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;OAEI,EAAC,UAAU,EAAC,MAAM,eAAe;OAEjC,EAAC,oBAAoB,EAAC,MAAM,aAAa;OACzC,EAAC,4BAA4B,EAAsB,MAAM,wBAAwB;OACjF,EAAkB,MAAM,EAAC,MAAM,UAAU;AAEhD,SAAQ,eAAe,EAAE,SAAS,QAAO,UAAU,CAAC;AAGpD;IAAgC,8BAAM;IACtC;QAAgB,kBAAM,oBAAoB,CAAC,CAAC;IAAC,CAAC;IAC9C;;;;;;OAMG;IACH,0BAAK,GAAL,UACM,MAAc,EAAE,GAAW,EAAE,mBAAoC,EACjE,mBAAuE;QAD1C,mCAAoC,GAApC,2BAAoC;QACjE,mCAAuE,GAAvE,kDAAuE;QACzE,MAAM,CAAC,gBAAK,CAAC,KAAK,YAAC,MAAM,EAAE,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,CAAC;IAC5E,CAAC;IACI,qBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,yBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,iBAAC;AAAD,CAAC,AApBD,CAAgC,MAAM,GAoBrC;AAED;IACC,gBAAgB;IACjB,UAAU,CAAC,UAAU,CAAC;IACrB;;;OAGG;IACJ,UAAU,CAAC,cAAc,CAAC;AAC1B,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\n\nimport {getHtmlTagDefinition} from './html_tags';\nimport {DEFAULT_INTERPOLATION_CONFIG, InterpolationConfig} from './interpolation_config';\nimport {ParseTreeResult, Parser} from './parser';\n\nexport {ParseTreeResult, TreeError} from './parser';\n\n\nexport class HtmlParser extends Parser {\nconstructor() { super(getHtmlTagDefinition); }\n/**\n * @param {?} source\n * @param {?} url\n * @param {?=} parseExpansionForms\n * @param {?=} interpolationConfig\n * @return {?}\n */\nparse(\n      source: string, url: string, parseExpansionForms: boolean = false,\n      interpolationConfig: InterpolationConfig = DEFAULT_INTERPOLATION_CONFIG): ParseTreeResult {\n    return super.parse(source, url, parseExpansionForms, interpolationConfig);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HtmlParser_tsickle_Closure_declarations() {\n /** @type {?} */\nHtmlParser.decorators;\n /**\n  * @nocollapse\n  * @type {?}\n  */\nHtmlParser.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}