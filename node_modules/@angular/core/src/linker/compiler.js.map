{"version":3,"file":"compiler.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/compiler.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;OAEI,EAAC,WAAW,EAAC,MAAM,OAAO;OAC1B,EAAC,SAAS,EAAC,MAAM,kBAAkB;OACnC,EAAC,SAAS,EAAC,MAAM,gBAAgB;AAMxC;;;GAGG;AACH;IAAgD,8CAAS;IACzD;;OAEG;IACH,oCAAmB,QAAmB;QAClC,kBAAM,oCAAkC,SAAS,CAAC,QAAQ,CAAC,4BAAyB,CAAC,CAAC;QADvE,aAAQ,GAAR,QAAQ,CAAW;IAEpC,CAAC;IACH,iCAAC;AAAD,CAAC,AAPD,CAAgD,SAAS,GAOxD;AAED;IACC,gBAAgB;IACjB,0BAA0B,CAAC,SAAS,CAAC,QAAQ,CAAC;AAC9C,CAAC;AAED;;;GAGG;AACH;IACA;;;OAGG;IACH,sCACO,eAAmC,EACnC,kBAA2C;QAD3C,oBAAe,GAAf,eAAe,CAAoB;QACnC,uBAAkB,GAAlB,kBAAkB,CAAyB;IAAG,CAAC;IACtD,mCAAC;AAAD,CAAC,AARD,IAQC;AAED;IACC,gBAAgB;IACjB,4BAA4B,CAAC,SAAS,CAAC,eAAe,CAAC;IACtD,gBAAgB;IACjB,4BAA4B,CAAC,SAAS,CAAC,kBAAkB,CAAC;AAC1D,CAAC;AAED;;GAEG;AACH;IACE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;AACpD,CAAC;AACD;;;;;;;;GAQG;AACH;IAAA;IAoDA,CAAC;IAnDD;;;;;;OAMG;IACH,oCAAiB,GAAjB,UAAqB,UAAmB,IAAwB,MAAM,WAAW,EAAE,CAAC,CAAC,CAAC;IACtF;;;;OAIG;IACH,qCAAkB,GAAlB,UAAsB,UAAmB,IAAiC,MAAM,WAAW,EAAE,CAAC,CAAC,CAAC;IAChG;;;;OAIG;IACH,oDAAiC,GAAjC,UAAqC,UAAmB;QACpD,MAAM,WAAW,EAAE,CAAC;IACtB,CAAC;IACH;;;;OAIG;IACH,qDAAkC,GAAlC,UAAsC,UAAmB;QAErD,MAAM,WAAW,EAAE,CAAC;IACtB,CAAC;IACH;;;;;;;OAOG;IACH,wCAAqB,GAArB,UAAsB,SAAoB,IAAc,MAAM,WAAW,EAAE,CAAC,CAAC,CAAC;IAC9E;;;OAGG;IACH,6BAAU,GAAV,cAAoB,CAAC;IACrB;;;;OAIG;IACH,gCAAa,GAAb,UAAc,IAAe,IAAG,CAAC;IACjC,eAAC;AAAD,CAAC,AApDD,IAoDC;AAcD;;;;GAIG;AACH,OAAO,IAAM,gBAAgB,CAAC,gBAAgB,GAAG,IAAI,WAAW,CAAC,iBAAiB,CAAC,CAAC;AACpF;;;;GAIG;AACH;IAAA;IAOA,CAAC;IAND;;;;OAIG;IACH,wCAAc,GAAd,UAAe,OAA2B,IAAG,CAAC;IAC9C,sBAAC;AAAD,CAAC,AAPD,IAOC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OpaqueToken} from '../di';\nimport {BaseError} from '../facade/errors';\nimport {stringify} from '../facade/lang';\nimport {ViewEncapsulation} from '../metadata';\nimport {Type} from '../type';\n\nimport {ComponentFactory} from './component_factory';\nimport {NgModuleFactory} from './ng_module_factory';\n/**\n *  Indicates that a component is still being loaded in a synchronous compile.\n  * *\n */\nexport class ComponentStillLoadingError extends BaseError {\n/**\n * @param {?} compType\n */\nconstructor(public compType: Type<any>) {\n    super(`Can't compile synchronously as ${stringify(compType)} is still being loaded!`);\n  }\n}\n\nfunction ComponentStillLoadingError_tsickle_Closure_declarations() {\n /** @type {?} */\nComponentStillLoadingError.prototype.compType;\n}\n\n/**\n *  Combination of NgModuleFactory and ComponentFactorys.\n  * *\n */\nexport class ModuleWithComponentFactories<T> {\n/**\n * @param {?} ngModuleFactory\n * @param {?} componentFactories\n */\nconstructor(\npublic ngModuleFactory: NgModuleFactory<T>,\npublic componentFactories: ComponentFactory<any>[]) {}\n}\n\nfunction ModuleWithComponentFactories_tsickle_Closure_declarations() {\n /** @type {?} */\nModuleWithComponentFactories.prototype.ngModuleFactory;\n /** @type {?} */\nModuleWithComponentFactories.prototype.componentFactories;\n}\n\n/**\n * @return {?}\n */\nfunction _throwError() {\n  throw new Error(`Runtime compiler is not loaded`);\n}\n/**\n *  Low-level service for running the angular compiler during runtime\n  * to create {@link ComponentFactory}s, which\n  * can later be used to create and render a Component instance.\n  * *\n  * Each `@NgModule` provides an own `Compiler` to its injector,\n  * that will use the directives/pipes of the ng module for compilation\n  * of components.\n */\nexport class Compiler {\n/**\n *  Compiles the given NgModule and all of its components. All templates of the components listed\n  * in `entryComponents`\n  * have to be inlined. Otherwise throws a {@link ComponentStillLoadingError}.\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleSync<T>(moduleType: Type<T>): NgModuleFactory<T> { throw _throwError(); }\n/**\n *  Compiles the given NgModule and all of its components\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleAsync<T>(moduleType: Type<T>): Promise<NgModuleFactory<T>> { throw _throwError(); }\n/**\n *  Same as {@link compileModuleSync} but also creates ComponentFactories for all components.\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleAndAllComponentsSync<T>(moduleType: Type<T>): ModuleWithComponentFactories<T> {\n    throw _throwError();\n  }\n/**\n *  Same as {@link compileModuleAsync} but also creates ComponentFactories for all components.\n * @param {?} moduleType\n * @return {?}\n */\ncompileModuleAndAllComponentsAsync<T>(moduleType: Type<T>):\n      Promise<ModuleWithComponentFactories<T>> {\n    throw _throwError();\n  }\n/**\n *  Exposes the CSS-style selectors that have been used in `ngContent` directives within\n  * the template of the given component.\n  * This is used by the `upgrade` library to compile the appropriate transclude content\n  * in the Angular 1 wrapper component.\n * @param {?} component\n * @return {?}\n */\ngetNgContentSelectors(component: Type<any>): string[] { throw _throwError(); }\n/**\n *  Clears all caches.\n * @return {?}\n */\nclearCache(): void {}\n/**\n *  Clears the cache for the given component/ngModule.\n * @param {?} type\n * @return {?}\n */\nclearCacheFor(type: Type<any>) {}\n}\n\n/**\n * Options for creating a compiler\n *\n * @experimental\n */\nexport type CompilerOptions = {\n  useDebug?: boolean,\n  useJit?: boolean,\n  defaultEncapsulation?: ViewEncapsulation,\n  providers?: any[],\n};\n\n/**\n * Token to provide CompilerOptions in the platform injector.\n *\n * @experimental\n */\nexport const /** @type {?} */ COMPILER_OPTIONS = new OpaqueToken('compilerOptions');\n/**\n *  A factory for creating a Compiler\n  * *\n * @abstract\n */\nexport abstract class CompilerFactory {\n/**\n * @abstract\n * @param {?=} options\n * @return {?}\n */\ncreateCompiler(options?: CompilerOptions[]) {}\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}