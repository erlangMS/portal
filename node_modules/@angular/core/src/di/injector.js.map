{"version":3,"file":"injector.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/di/injector.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,aAAa,EAAC,MAAM,kBAAkB;OACvC,EAAC,SAAS,EAAC,MAAM,gBAAgB;AAExC,IAAM,gBAAgB,CAAC,mBAAmB,GAAG,IAAI,MAAM,EAAE,CAAC;AAC1D,OAAO,IAAM,gBAAgB,CAAC,kBAAkB,GAAG,mBAAmB,CAAC;AAEvE;IAAA;IAYA,CAAC;IAXD;;;;OAIG;IACH,2BAAG,GAAH,UAAI,KAAU,EAAE,aAAwC;QAAxC,6BAAwC,GAAxC,mCAAwC;QACpD,EAAE,CAAC,CAAC,aAAa,KAAK,mBAAmB,CAAC,CAAC,CAAC;YAC1C,MAAM,IAAI,KAAK,CAAC,qBAAmB,SAAS,CAAC,KAAK,CAAC,MAAG,CAAC,CAAC;QAC1D,CAAC;QACD,MAAM,CAAC,aAAa,CAAC;IACvB,CAAC;IACH,oBAAC;AAAD,CAAC,AAZD,IAYC;AACD;;;;;;;;;;;;;;;;GAgBG;AACH;IAAA;IAcA,CAAC;IAXD;;;;;;;;;OASG;IACH,sBAAG,GAAH,UAAI,KAAU,EAAE,aAAmB,IAAS,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;IAZ5D,2BAAkB,GAAG,mBAAmB,CAAC;IACzC,aAAI,GAAa,IAAI,aAAa,EAAE,CAAC;IAY9C,eAAC;AAAD,CAAC,AAdD,IAcC;AAED;IACC,gBAAgB;IACjB,QAAQ,CAAC,kBAAkB,CAAC;IAC3B,gBAAgB;IACjB,QAAQ,CAAC,IAAI,CAAC;AACd,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {unimplemented} from '../facade/errors';\nimport {stringify} from '../facade/lang';\n\nconst /** @type {?} */ _THROW_IF_NOT_FOUND = new Object();\nexport const /** @type {?} */ THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\nclass _NullInjector implements Injector {\n/**\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue: any = _THROW_IF_NOT_FOUND): any {\n    if (notFoundValue === _THROW_IF_NOT_FOUND) {\n      throw new Error(`No provider for ${stringify(token)}!`);\n    }\n    return notFoundValue;\n  }\n}\n/**\n *  ```\n  * const injector: Injector = ...;\n  * injector.get(...);\n  * ```\n  * *\n  * For more details, see the {@linkDocs guide/dependency-injection \"Dependency Injection Guide\"}.\n  * *\n  * ### Example\n  * *\n  * {@example core/di/ts/injector_spec.ts region='Injector'}\n  * *\n  * `Injector` returns itself when given `Injector` as a token:\n  * {@example core/di/ts/injector_spec.ts region='injectInjector'}\n  * *\n * @abstract\n */\nexport abstract class Injector {\n  static THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n  static NULL: Injector = new _NullInjector();\n/**\n *  Retrieves an instance from the injector based on the provided token.\n  * If not found:\n  * - Throws {@link NoProviderError} if no `notFoundValue` that is not equal to\n  * Injector.THROW_IF_NOT_FOUND is given\n  * - Returns the `notFoundValue` otherwise\n * @param {?} token\n * @param {?=} notFoundValue\n * @return {?}\n */\nget(token: any, notFoundValue?: any): any { return unimplemented(); }\n}\n\nfunction Injector_tsickle_Closure_declarations() {\n /** @type {?} */\nInjector.THROW_IF_NOT_FOUND;\n /** @type {?} */\nInjector.NULL;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}